name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build library
        run: npm run build:lib

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Auto-determine version bump based on commit messages
            if git log --format="%s" -n 1 | grep -qE "BREAKING CHANGE|major:"; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif git log --format="%s" -n 1 | grep -qE "feat:|minor:"; then
              echo "type=minor" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        id: bump
        run: |
          OLD_VERSION=$(node -p "require('./package.json').version")
          npm version ${{ steps.version.outputs.type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update changelog
        run: |
          cat > TEMP_CHANGELOG.md << EOF
          # Changelog
          
          ## [v${{ steps.bump.outputs.new_version }}] - $(date +%Y-%m-%d)
          
          ### Changes
          - Published from commit: ${{ github.sha }}
          - Previous version: v${{ steps.bump.outputs.old_version }}
          
          EOF
          if [ -f CHANGELOG.md ]; then
            tail -n +1 CHANGELOG.md >> TEMP_CHANGELOG.md
          fi
          mv TEMP_CHANGELOG.md CHANGELOG.md

      - name: Commit version bump
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): v${{ steps.bump.outputs.new_version }}"
          git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release v${{ steps.bump.outputs.new_version }}"

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push changes
        run: |
          git push origin main
          git push origin "v${{ steps.bump.outputs.new_version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          release_name: Release v${{ steps.bump.outputs.new_version }}
          body: |
            ## Changes in v${{ steps.bump.outputs.new_version }}
            
            - Published from commit: ${{ github.sha }}
            - Previous version: v${{ steps.bump.outputs.old_version }}
            
            ### Installation
            ```bash
            npm install @rafal.lemieszewski/tide-ui@${{ steps.bump.outputs.new_version }}
            ```
            
            ### Documentation
            View the component library at: https://tide-ui-storybook.vercel.app
          draft: false
          prerelease: false